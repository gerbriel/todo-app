import { useState, useEffect } from 'react'
import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core'
import { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable'
import { Modal } from './Modal'
import { Button } from './Button'
import { Input } from './Input'
import { LabelSelector } from './LabelSelector'
import { DraggableCardSection } from './DraggableCardSection'
import { 
  Calendar, 
  Flag, 
  Settings, 
  Clock, 
  Plus,
  Type,
  CheckSquare,
  MapPin,
  FileText,
  X
} from 'lucide-react'
import type { Card, Label, CardSection } from '../../types'

interface EnhancedCardSaveData {
  card?: {
    title?: string;
    description?: string;
    date_start?: string;
    date_end?: string;
  };
  labels?: Label[];
  sections?: CardSection[];
}

interface EnhancedCardEditModalProps {
  isOpen: boolean
  onClose: () => void
  onSave: (cardData: EnhancedCardSaveData | Partial<Card>) => void
  card: Card
  availableLabels?: Label[]
  onCreateLabel?: (name: string, color: string) => void
  workspaceId: string
}

const SECTION_TEMPLATES = [
  { type: 'text' as const, label: 'Text Block', icon: Type },
  { type: 'notes' as const, label: 'Notes', icon: FileText },
  { type: 'checklist' as const, label: 'Checklist', icon: CheckSquare },
  { type: 'address' as const, label: 'Address & Map', icon: MapPin },
  { type: 'timeline' as const, label: 'Timeline', icon: Clock },
  { type: 'attachments' as const, label: 'Attachments', icon: FileText },
  { type: 'custom_fields' as const, label: 'Custom Fields', icon: Settings }
]

export function EnhancedCardEditModal({
  isOpen,
  onClose,
  onSave,
  card,
  availableLabels = [],
  onCreateLabel,
  workspaceId
}: EnhancedCardEditModalProps) {
  console.log('ðŸ”´ ENHANCED MODAL: EnhancedCardEditModal is being used! This should NOT happen!')
  console.log('ðŸ”´ ENHANCED MODAL: Card ID:', card.id)
  
  // Basic card fields
  const [title, setTitle] = useState(card.title)
  const [status, setStatus] = useState(card.status || 'not-started')
  const [priority, setPriority] = useState(card.priority || 'medium')
  const [dateStart, setDateStart] = useState(card.date_start ? card.date_start.split('T')[0] : '')
  const [dateEnd, setDateEnd] = useState(card.date_end ? card.date_end.split('T')[0] : '')
  const [selectedLabels, setSelectedLabels] = useState<Label[]>(card.labels || [])
  
  // Enhanced sections
  const [sections, setSections] = useState<CardSection[]>(card.sections || [])
  const [showAddSectionMenu, setShowAddSectionMenu] = useState(false)
  const [modalJustOpened, setModalJustOpened] = useState(true)
  
  // Check if this card was recently cleaned (has no Base64 data and no sections)
  const isCleanedCard = !card.description?.includes('SECTIONS_B64') && 
                        (!card.sections || card.sections.length === 0)

  // Drag and drop sensors
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  )

  // Initialize default sections if none exist (only run once when card changes)
  useEffect(() => {
    console.log('=== SECTIONS INITIALIZATION ===')
    console.log('Card sections:', card.sections)
    console.log('Current sections state:', sections)
    
    // Reset the "just opened" flag after initialization
    setModalJustOpened(true)
    
    if (card.sections && card.sections.length > 0) {
      // Use existing sections from card
      console.log('Using existing card sections')
      setSections(card.sections)
    } else {
      // Don't create default sections automatically - only when user actually wants to edit
      // This prevents unnecessary sections from being created and saved
      console.log('Card has no sections - leaving sections empty until user adds content')
      setSections([])
    }
    
    // Allow auto-save after a longer delay to prevent initialization from triggering saves
    // For cleaned cards, wait even longer to be absolutely sure
    const delay = isCleanedCard ? 10000 : 5000 // 10 seconds for cleaned cards, 5 for others
    const timer = setTimeout(() => {
      setModalJustOpened(false)
    }, delay)
    
    console.log(`Auto-save will be enabled in ${delay/1000} seconds (cleaned card: ${isCleanedCard})`)
    
    return () => clearTimeout(timer)
  }, [card.id]) // Only depend on card.id to prevent unnecessary re-runs

  const handleDragEnd = (event: any) => {
    const { active, over } = event

    if (active.id !== over?.id) {
      setSections((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id)
        const newIndex = items.findIndex((item) => item.id === over.id)
        
        const newItems = arrayMove(items, oldIndex, newIndex)
        
        // Update positions
        return newItems.map((item, index) => ({
          ...item,
          position: index,
          updated_at: new Date().toISOString()
        }))
      })
    }
  }

  const addSection = (sectionType: CardSection['section_type']) => {
    console.log('Adding section of type:', sectionType)
    
    // Just add the requested section - no automatic description section creation
    const newSection: CardSection = {
      id: `section-${Date.now()}`,
      card_id: card.id,
      title: SECTION_TEMPLATES.find(t => t.type === sectionType)?.label || 'New Section',
      content: '',
      section_type: sectionType,
      position: sections.length,
      collapsed: false,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
    
    setSections([...sections, newSection])
    setShowAddSectionMenu(false)
  }

  const updateSection = (sectionId: string, updates: Partial<CardSection>) => {
    console.log('Updating section:', sectionId, 'with updates:', updates)
    setSections(sections.map(section => 
      section.id === sectionId 
        ? { ...section, ...updates, updated_at: new Date().toISOString() }
        : section
    ))
  }

  const deleteSection = (sectionId: string) => {
    if (confirm('Are you sure you want to delete this section?')) {
      setSections(sections.filter(section => section.id !== sectionId))
    }
  }

  const handleSave = () => {
    console.log('=== HANDLE SAVE CALLED ===')
    console.log('Stack trace:', new Error().stack)
    console.log('Current sections:', sections)
    console.log('Card sections:', card.sections)
    
    // Compare sections and labels to see if they actually changed
    const normalizeSection = (section: CardSection) => ({
      ...section,
      created_at: '',
      updated_at: ''
    })
    
    const normalizedCurrentSections = sections.map(normalizeSection)
    const normalizedCardSections = (card.sections || []).map(normalizeSection)
    
    const sectionsChanged = JSON.stringify(normalizedCurrentSections) !== JSON.stringify(normalizedCardSections)
    const labelsChanged = JSON.stringify(selectedLabels) !== JSON.stringify(card.labels || [])
    
    // ADDITIONAL SAFEGUARD: Don't consider it a change if both are empty arrays
    const sectionsActuallyChanged = sectionsChanged && !(
      normalizedCurrentSections.length === 0 && normalizedCardSections.length === 0
    )
    
    console.log('Sections changed:', sectionsChanged)
    console.log('Sections actually changed (not just empty->empty):', sectionsActuallyChanged)
    console.log('Labels changed:', labelsChanged)
    
    // Only save basic card fields, not description (since sections handle content)
    const cardData: any = {
      title: title,
      status: status,
      priority: priority,
    }
    
    // Only add dates if they have values
    if (dateStart) {
      cardData.date_start = `${dateStart}T00:00:00Z`
    }
    if (dateEnd) {
      cardData.date_end = `${dateEnd}T23:59:59Z`
    }
    
    // SMART SECTIONS HANDLING: Save sections but prevent Base64 corruption
    // Only save basic card fields and labels - let sections be handled by a safer method
    const saveData: any = { card: cardData }
    
    // Include labels if they changed (labels are safe)
    if (labelsChanged) {
      saveData.labels = selectedLabels
      console.log('Including labels in save:', selectedLabels)
    }
    
    // SAFE SECTIONS HANDLING: Only include sections if they have actual content
    // and avoid triggering the problematic Base64 encoding
    if (sectionsChanged && sections.length > 0) {
      // Filter out empty sections and only save sections with actual content
      const sectionsWithContent = sections.filter(section => 
        section.content && section.content.trim().length > 0
      )
      
      if (sectionsWithContent.length > 0) {
        saveData.sections = sectionsWithContent
        console.log('Including sections with content in save:', sectionsWithContent)
      } else {
        console.log('All sections are empty, not including in save to prevent Base64 corruption')
      }
    }
    
    console.log('Enhanced modal saving data (smart sections handling):', saveData)
    
    console.log('Enhanced modal saving data:', saveData)
    
    // Use the enhanced update function only if sections or labels changed
    onSave(saveData)
  }

  // Auto-save when modal closes (only if there are changes)
  const handleClose = () => {
    console.log('=== MODAL CLOSING ===')
    
    // Compare sections more carefully by excluding timestamps if content is the same
    const normalizeSection = (section: CardSection) => ({
      ...section,
      created_at: '',
      updated_at: ''
    })
    
    const normalizedCurrentSections = sections.map(normalizeSection)
    const normalizedCardSections = (card.sections || []).map(normalizeSection)
    
    // ADDITIONAL SAFEGUARD: Don't consider it a change if both are empty arrays
    const sectionsChanged = JSON.stringify(normalizedCurrentSections) !== JSON.stringify(normalizedCardSections)
    const sectionsActuallyChanged = sectionsChanged && !(
      normalizedCurrentSections.length === 0 && normalizedCardSections.length === 0
    )
    
    // Check if there are actual changes before saving
    const hasChanges = title !== card.title || 
                      status !== (card.status || 'not-started') ||
                      priority !== (card.priority || 'medium') ||
                      dateStart !== (card.date_start ? card.date_start.split('T')[0] : '') ||
                      dateEnd !== (card.date_end ? card.date_end.split('T')[0] : '') ||
                      JSON.stringify(selectedLabels) !== JSON.stringify(card.labels || []) ||
                      sectionsActuallyChanged
    
    if (hasChanges) {
      console.log('Auto-saving on close due to changes...')
      handleSave()
    } else {
      console.log('No changes detected, skipping save on close')
    }
    onClose()
  }

  // Auto-save on data changes (debounced) - DISABLED TO PREVENT CASCADE
  useEffect(() => {
    // Don't auto-save immediately after modal opens or if card is not set
    if (!card.id || modalJustOpened) {
      console.log('Skipping auto-save: modalJustOpened =', modalJustOpened, 'card.id =', card.id)
      return
    }
    
    // CRITICAL: Completely disable auto-save to prevent cascade saves that create Base64 corruption
    console.log('=== AUTO-SAVE DISABLED ===')
    console.log('Auto-save completely disabled to prevent cascading saves and Base64 corruption')
    console.log('Save will only happen on modal close or explicit user action')
    return
    
    // Original auto-save logic commented out
    /*
    const timeoutId = setTimeout(() => {
      console.log('=== AUTO-SAVE CHECK ===')
      console.log('Current title:', title, 'Card title:', card.title)
      console.log('Current sections length:', sections.length, 'Card sections length:', card.sections?.length || 0)
      
      // Compare sections more carefully by excluding timestamps if content is the same
      const normalizeSection = (section: CardSection) => ({
        ...section,
        created_at: '',
        updated_at: ''
      })
      
      const normalizedCurrentSections = sections.map(normalizeSection)
      const normalizedCardSections = (card.sections || []).map(normalizeSection)
      
      console.log('Normalized current sections:', normalizedCurrentSections)
      console.log('Normalized card sections:', normalizedCardSections)
      
      // ADDITIONAL SAFEGUARD: Don't consider it a change if both are empty arrays
      const sectionsChanged = JSON.stringify(normalizedCurrentSections) !== JSON.stringify(normalizedCardSections)
      const sectionsActuallyChanged = sectionsChanged && !(
        normalizedCurrentSections.length === 0 && normalizedCardSections.length === 0
      )
      
      const hasChanges = title !== card.title || 
                        status !== (card.status || 'not-started') ||
                        priority !== (card.priority || 'medium') ||
                        dateStart !== (card.date_start ? card.date_start.split('T')[0] : '') ||
                        dateEnd !== (card.date_end ? card.date_end.split('T')[0] : '') ||
                        JSON.stringify(selectedLabels) !== JSON.stringify(card.labels || []) ||
                        sectionsActuallyChanged
      
      if (hasChanges) {
        console.log('Auto-saving due to changes...')
        console.log('Changes detected:', {
          title: title !== card.title,
          status: status !== (card.status || 'not-started'),
          priority: priority !== (card.priority || 'medium'),
          dateStart: dateStart !== (card.date_start ? card.date_start.split('T')[0] : ''),
          dateEnd: dateEnd !== (card.date_end ? card.date_end.split('T')[0] : ''),
          labels: JSON.stringify(selectedLabels) !== JSON.stringify(card.labels || []),
          sectionsChanged: sectionsChanged,
          sectionsActuallyChanged: sectionsActuallyChanged
        })
        handleSave()
      } else {
        console.log('No changes detected, skipping auto-save')
      }
    }, 1000) // Auto-save after 1 second of no changes

    return () => clearTimeout(timeoutId)
  }, [title, status, priority, dateStart, dateEnd, selectedLabels, sections, card.id, modalJustOpened]) // Added modalJustOpened to dependencies

  if (!isOpen) return null

  return (
    <Modal isOpen={isOpen} onClose={handleClose}>
      <div className="w-full max-w-4xl mx-auto bg-white rounded-lg shadow-xl max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h2 className="text-xl font-semibold text-gray-900">Edit Card</h2>
          <div className="flex items-center space-x-2">
            <button
              onClick={handleClose}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto">
          <div className="p-6 space-y-6">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Title */}
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Title *
                </label>
                <Input
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="Enter card title..."
                  className="text-lg font-medium"
                />
              </div>

              {/* Status */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Flag className="w-4 h-4 inline mr-1" />
                  Status
                </label>
                <select
                  value={status}
                  onChange={(e) => setStatus(e.target.value as Card['status'] || 'not-started')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="not-started">Not Started</option>
                  <option value="in-progress">In Progress</option>
                  <option value="completed">Completed</option>
                  <option value="blocked">Blocked</option>
                  <option value="on-hold">On Hold</option>
                </select>
              </div>

              {/* Priority */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Priority
                </label>
                <select
                  value={priority}
                  onChange={(e) => setPriority(e.target.value as Card['priority'] || 'medium')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>

              {/* Dates */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Calendar className="w-4 h-4 inline mr-1" />
                  Start Date
                </label>
                <Input
                  type="date"
                  value={dateStart}
                  onChange={(e) => setDateStart(e.target.value)}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Calendar className="w-4 h-4 inline mr-1" />
                  End Date
                </label>
                <Input
                  type="date"
                  value={dateEnd}
                  onChange={(e) => setDateEnd(e.target.value)}
                />
              </div>
            </div>

            {/* Labels */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Labels
              </label>
              <LabelSelector
                selectedLabels={selectedLabels}
                availableLabels={availableLabels}
                onLabelsChange={setSelectedLabels}
                onCreateLabel={onCreateLabel}
              />
            </div>

            {/* Draggable Sections */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium text-gray-900">Card Sections</h3>
                <div className="relative">
                  <Button
                    onClick={() => setShowAddSectionMenu(!showAddSectionMenu)}
                    variant="secondary"
                    size="sm"
                  >
                    <Plus className="w-4 h-4 mr-1" />
                    Add Section
                  </Button>
                  
                  {/* Add Section Menu */}
                  {showAddSectionMenu && (
                    <div className="absolute right-0 top-full mt-2 w-56 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                      <div className="p-2">
                        {SECTION_TEMPLATES.map((template) => {
                          const IconComponent = template.icon
                          return (
                            <button
                              key={template.type}
                              onClick={() => addSection(template.type)}
                              className="w-full flex items-center space-x-3 px-3 py-2 text-left hover:bg-gray-50 rounded-md"
                            >
                              <IconComponent className="w-4 h-4 text-gray-500" />
                              <span className="text-sm text-gray-900">{template.label}</span>
                            </button>
                          )
                        })}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Sortable Sections */}
              <DndContext
                sensors={sensors}
                collisionDetection={closestCenter}
                onDragEnd={handleDragEnd}
              >
                <SortableContext items={sections.map(s => s.id)} strategy={verticalListSortingStrategy}>
                  <div className="space-y-3">
                    {sections.length > 0 ? (
                      sections.map((section) => (
                        <DraggableCardSection
                          key={section.id}
                          section={section}
                          onUpdate={updateSection}
                          onDelete={deleteSection}
                        />
                      ))
                    ) : (
                      <div className="text-center py-8 text-gray-500">
                        <div className="mb-2">No sections yet</div>
                        <div className="text-sm">Click "Add Section" to get started</div>
                      </div>
                    )}
                  </div>
                </SortableContext>
              </DndContext>

              {sections.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  No sections yet. Add your first section to get started.
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Click outside to close add section menu */}
      {showAddSectionMenu && (
        <div
          className="fixed inset-0 z-5"
          onClick={() => setShowAddSectionMenu(false)}
        />
      )}
    </Modal>
  )
}